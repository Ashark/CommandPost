[
  {
    "Constant" : [

    ],
    "submodules" : [
      "_control",
      "_view",
      "avplayer",
      "button",
      "colorwell",
      "datepicker",
      "image",
      "progress"
    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "THis submodule provides common methods and metamethods linking a variety of visual elements that can be used with `hs._asm.guitk` to build your own visual displays and input  interfaces within Hammerspoon.",
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "THis submodule provides common methods and metamethods linking a variety of visual elements that can be used with `hs._asm.guitk` to build your own visual displays and input  interfaces within Hammerspoon.\n\nThis module by itself provides no elements, but serves as the glue between it's submodules and the guitk window and manager objects.  Elements are defined as submodules to this and may inherit methods defined in `hs._asm.guitk.element._control` and `hs._asm.guitk.element._view`.  The documentation for each specific element will indicate if it inherits methods from one of these helper submodules.\n\nMethods invoked on element userdata objects which are not recognized by the element itself are passed up the responder chain (`hs._asm.guitk.manager` and `hs._asm.guitk`) as well, allowing you to work from the userdata which is most relevant without having to track the userdata for its supporting infrastructure separately. This will become more clear in the examples provided at a location to be determined (currently in the [..\/Examples](..\/Examples) directory of this repository folder).",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "name" : "allowsCutCopyPaste",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.\n\nParameters:\n * `state` - an optional boolean indicating whether or not animated GIF images can be animated.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
          ""
        ],
        "def" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "name" : "animates",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not animated GIF images can be animated.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.\n\nParameters:\n * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "name" : "editable",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
        "parameters" : [
          " * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "name" : "allowsCutCopyPaste",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.\n\nParameters:\n * `state` - an optional boolean indicating whether or not animated GIF images can be animated.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
          ""
        ],
        "def" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "name" : "animates",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not animated GIF images can be animated.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.\n\nParameters:\n * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "name" : "editable",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
        "parameters" : [
          " * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Common methods inherited by elements which act as controls. Generally these are elements which are manipulated directly by the user to supply information or trigger a desired action.",
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Common methods inherited by elements which act as controls. Generally these are elements which are manipulated directly by the user to supply information or trigger a desired action.\n\nCurrently, the elements which inherit these methods are:\n * hs._asm.guitk.element.button\n * hs._asm.guitk.element.colorwell\n * hs._asm.guitk.element.datepicker\n * hs._asm.guitk.element.image\n * hs._asm.guitk.element.textfield\n\nmacOS Developer Note: Understanding this is not required for use of the methods provided by this submodule, but for those interested, some of the elements provided under `hs._asm.guitk.element` are subclasses of the macOS NSControl class; macOS methods which belong to NSControl and are not overridden or superseded by more specific or appropriate element specific methods are defined here so that they can be used by all elements which share this common ancestor.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.\n\nParameters:\n * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:\n   * \"left\"      - Align text along the left edge\n   * \"center\"    - Align text equally along both sides of the center line\n   * \"right\"     - Align text along the right edge\n   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned\n   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "stripped_doc" : [
          "Get or set the alignment of text which is displayed by the element, often as a label or description.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "name" : "textAlignment",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "desc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.",
        "parameters" : [
          " * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:",
          "   * \"left\"      - Align text along the left edge",
          "   * \"center\"    - Align text equally along both sides of the center line",
          "   * \"right\"     - Align text along the right edge",
          "   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned",
          "   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the tint for the element\n\nParameters:\n * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:\n   * \"default\"\n   * \"blue\"\n   * \"graphite\"\n   * \"clear\"\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os.",
        "stripped_doc" : [
          "Get or set the tint for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "name" : "controlTint",
        "notes" : [
          " * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os."
        ],
        "signature" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the tint for the element",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:",
          "   * \"default\"",
          "   * \"blue\"",
          "   * \"graphite\"",
          "   * \"clear\"",
          ""
        ]
      },
      {
        "doc" : "Get or set the level of details in terms of the expected size of the element\n\nParameters:\n * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:\n   * \"regular\" - present the element in its normal default size\n   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.\n   * \"mini\"    - present the element in an even smaller form\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided.",
        "stripped_doc" : [
          "Get or set the level of details in terms of the expected size of the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "name" : "controlSize",
        "notes" : [
          " * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided."
        ],
        "signature" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the level of details in terms of the expected size of the element",
        "parameters" : [
          " * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:",
          "   * \"regular\" - present the element in its normal default size",
          "   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.",
          "   * \"mini\"    - present the element in an even smaller form",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the element has a highlighted appearance.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements have a highlighted appearance and this method will have no effect in such cases.",
        "stripped_doc" : [
          "Get or set whether or not the element has a highlighted appearance.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "name" : "highlighted",
        "notes" : [
          " * Not all elements have a highlighted appearance and this method will have no effect in such cases."
        ],
        "signature" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the element has a highlighted appearance.",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the element is currently enabled.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element is enabled.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "stripped_doc" : [
          "Get or set whether or not the element is currently enabled.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "name" : "enabled",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "desc" : "Get or set whether or not the element is currently enabled.",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element is enabled.",
          ""
        ]
      },
      {
        "doc" : "Get or set the font used for displaying text for the element.\n\nParamaters:\n * `font` - an optional table specifying a font as defined in `hs.styledtext`.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number.",
        "stripped_doc" : [
          "Get or set the font used for displaying text for the element.",
          "",
          "Paramaters:",
          " * `font` - an optional table specifying a font as defined in `hs.styledtext`.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "name" : "font",
        "notes" : [
          " * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number."
        ],
        "signature" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the font used for displaying text for the element.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.\n\nParamaters:\n * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield.",
        "stripped_doc" : [
          "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
          "",
          "Paramaters:",
          " * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "name" : "continuous",
        "notes" : [
          " * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield."
        ],
        "signature" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
        "parameters" : [

        ]
      }
    ],
    "items" : [
      {
        "doc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.\n\nParamaters:\n * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield.",
        "stripped_doc" : [
          "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
          "",
          "Paramaters:",
          " * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "name" : "continuous",
        "notes" : [
          " * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield."
        ],
        "signature" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Get or set the level of details in terms of the expected size of the element\n\nParameters:\n * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:\n   * \"regular\" - present the element in its normal default size\n   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.\n   * \"mini\"    - present the element in an even smaller form\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided.",
        "stripped_doc" : [
          "Get or set the level of details in terms of the expected size of the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "name" : "controlSize",
        "notes" : [
          " * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided."
        ],
        "signature" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the level of details in terms of the expected size of the element",
        "parameters" : [
          " * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:",
          "   * \"regular\" - present the element in its normal default size",
          "   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.",
          "   * \"mini\"    - present the element in an even smaller form",
          ""
        ]
      },
      {
        "doc" : "Get or set the tint for the element\n\nParameters:\n * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:\n   * \"default\"\n   * \"blue\"\n   * \"graphite\"\n   * \"clear\"\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os.",
        "stripped_doc" : [
          "Get or set the tint for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "name" : "controlTint",
        "notes" : [
          " * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os."
        ],
        "signature" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the tint for the element",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:",
          "   * \"default\"",
          "   * \"blue\"",
          "   * \"graphite\"",
          "   * \"clear\"",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the element is currently enabled.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element is enabled.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "stripped_doc" : [
          "Get or set whether or not the element is currently enabled.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "name" : "enabled",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "desc" : "Get or set whether or not the element is currently enabled.",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element is enabled.",
          ""
        ]
      },
      {
        "doc" : "Get or set the font used for displaying text for the element.\n\nParamaters:\n * `font` - an optional table specifying a font as defined in `hs.styledtext`.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number.",
        "stripped_doc" : [
          "Get or set the font used for displaying text for the element.",
          "",
          "Paramaters:",
          " * `font` - an optional table specifying a font as defined in `hs.styledtext`.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "name" : "font",
        "notes" : [
          " * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number."
        ],
        "signature" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the font used for displaying text for the element.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Get or set whether or not the element has a highlighted appearance.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements have a highlighted appearance and this method will have no effect in such cases.",
        "stripped_doc" : [
          "Get or set whether or not the element has a highlighted appearance.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "name" : "highlighted",
        "notes" : [
          " * Not all elements have a highlighted appearance and this method will have no effect in such cases."
        ],
        "signature" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the element has a highlighted appearance.",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.",
          ""
        ]
      },
      {
        "doc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.\n\nParameters:\n * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:\n   * \"left\"      - Align text along the left edge\n   * \"center\"    - Align text equally along both sides of the center line\n   * \"right\"     - Align text along the right edge\n   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned\n   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "stripped_doc" : [
          "Get or set the alignment of text which is displayed by the element, often as a label or description.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "name" : "textAlignment",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "desc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.",
        "parameters" : [
          " * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:",
          "   * \"left\"      - Align text along the left edge",
          "   * \"center\"    - Align text equally along both sides of the center line",
          "   * \"right\"     - Align text along the right edge",
          "   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned",
          "   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element._control"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Common methods inherited by all elements defined as submodules. This does not include elements which come from other Hammerspoon modules (currently this is limited to canvas objects, but may be extended to include webview and possibly chooser.)",
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Common methods inherited by all elements defined as submodules. This does not include elements which come from other Hammerspoon modules (currently this is limited to canvas objects, but may be extended to include webview and possibly chooser.)\n\nmacOS Developer Note: Understanding this is not required for use of the methods provided by this submodule, but for those interested, `hs._asm.guitk` works by providing a framework for displaying macOS objects which are subclasses of the NSView class; macOS methods which belong to NSView and are not overridden or superseded by more specific or appropriate element specific methods are defined here so that they can be used by all elements which share this common ancestor.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.\n\nParameters:\n * None\n\nReturns:\n * a table with `h` and `w` keys specifying the elements fitting size\n\nNotes:\n * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.\n * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.\n * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible.",
        "stripped_doc" : [
          "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "name" : "fittingSize",
        "notes" : [
          " * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.",
          " * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.",
          " * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "type" : "Method",
        "returns" : [
          " * a table with `h` and `w` keys specifying the elements fitting size",
          ""
        ],
        "desc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the frame size of the element.\n\nParameters:\n * `size` - a size-table specifying the height and width of the element's frame\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.\n * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.\n\n * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor.",
        "stripped_doc" : [
          "Get or set the frame size of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "name" : "frameSize",
        "notes" : [
          " * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.",
          " * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.",
          "",
          " * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor."
        ],
        "signature" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the frame size of the element.",
        "parameters" : [
          " * `size` - a size-table specifying the height and width of the element's frame",
          ""
        ]
      },
      {
        "doc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.\n\nParameters:\n * None\n\nReturns:\n * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.\n\nNotes:\n * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.\n * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity.",
        "stripped_doc" : [
          "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "name" : "_nextResponder",
        "notes" : [
          " * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.",
          " * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity."
        ],
        "signature" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "type" : "Method",
        "returns" : [
          " * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.",
          ""
        ],
        "desc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the tooltip for the element\n\nParameters:\n * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Tooltips are displayed when the window is active and the mouse pointer hovers over an element.",
        "stripped_doc" : [
          "Get or set the tooltip for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "name" : "tooltip",
        "notes" : [
          " * Tooltips are displayed when the window is active and the mouse pointer hovers over an element."
        ],
        "signature" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the tooltip for the element",
        "parameters" : [
          " * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element",
          ""
        ]
      },
      {
        "doc" : "Get or set the rotation of the element about its center.\n\nParameters:\n * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not.",
        "stripped_doc" : [
          "Get or set the rotation of the element about its center.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "name" : "rotation",
        "notes" : [
          " * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not."
        ],
        "signature" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the rotation of the element about its center.",
        "parameters" : [
          " * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the element is currently hidden\n\nParameters:\n * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.\n\n * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden.",
        "stripped_doc" : [
          "Get or set whether or not the element is currently hidden",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "name" : "hidden",
        "notes" : [
          " * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.",
          "",
          " * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden."
        ],
        "signature" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the element is currently hidden",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.",
          ""
        ]
      },
      {
        "doc" : "Get or set the alpha level of the element.\n\nParameters:\n * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "stripped_doc" : [
          "Get or set the alpha level of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "name" : "alphaValue",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "desc" : "Get or set the alpha level of the element.",
        "parameters" : [
          " * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the focus ring type for the element\n\nParameters:\n * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:\n   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".\n   * \"none\"     - No focus ring will be drawn around the element when it is the input focus\n   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Setting this for an element that cannot be an active element has no effect.\n * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\".",
        "stripped_doc" : [
          "Get or set the focus ring type for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "name" : "focusRingType",
        "notes" : [
          " * Setting this for an element that cannot be an active element has no effect.",
          " * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\"."
        ],
        "signature" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the focus ring type for the element",
        "parameters" : [
          " * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:",
          "   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".",
          "   * \"none\"     - No focus ring will be drawn around the element when it is the input focus",
          "   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.\n\nParameters:\n * None\n\nReturns:\n * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.\n\nNotes:\n * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.\n * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity.",
        "stripped_doc" : [
          "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "name" : "_nextResponder",
        "notes" : [
          " * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.",
          " * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity."
        ],
        "signature" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "type" : "Method",
        "returns" : [
          " * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.",
          ""
        ],
        "desc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the alpha level of the element.\n\nParameters:\n * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "stripped_doc" : [
          "Get or set the alpha level of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "name" : "alphaValue",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "desc" : "Get or set the alpha level of the element.",
        "parameters" : [
          " * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.",
          ""
        ]
      },
      {
        "doc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.\n\nParameters:\n * None\n\nReturns:\n * a table with `h` and `w` keys specifying the elements fitting size\n\nNotes:\n * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.\n * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.\n * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible.",
        "stripped_doc" : [
          "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "name" : "fittingSize",
        "notes" : [
          " * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.",
          " * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.",
          " * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "type" : "Method",
        "returns" : [
          " * a table with `h` and `w` keys specifying the elements fitting size",
          ""
        ],
        "desc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the focus ring type for the element\n\nParameters:\n * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:\n   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".\n   * \"none\"     - No focus ring will be drawn around the element when it is the input focus\n   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Setting this for an element that cannot be an active element has no effect.\n * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\".",
        "stripped_doc" : [
          "Get or set the focus ring type for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "name" : "focusRingType",
        "notes" : [
          " * Setting this for an element that cannot be an active element has no effect.",
          " * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\"."
        ],
        "signature" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the focus ring type for the element",
        "parameters" : [
          " * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:",
          "   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".",
          "   * \"none\"     - No focus ring will be drawn around the element when it is the input focus",
          "   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus",
          ""
        ]
      },
      {
        "doc" : "Get or set the frame size of the element.\n\nParameters:\n * `size` - a size-table specifying the height and width of the element's frame\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.\n * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.\n\n * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor.",
        "stripped_doc" : [
          "Get or set the frame size of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "name" : "frameSize",
        "notes" : [
          " * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.",
          " * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.",
          "",
          " * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor."
        ],
        "signature" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the frame size of the element.",
        "parameters" : [
          " * `size` - a size-table specifying the height and width of the element's frame",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the element is currently hidden\n\nParameters:\n * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.\n\n * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden.",
        "stripped_doc" : [
          "Get or set whether or not the element is currently hidden",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "name" : "hidden",
        "notes" : [
          " * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.",
          "",
          " * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden."
        ],
        "signature" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set whether or not the element is currently hidden",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.",
          ""
        ]
      },
      {
        "doc" : "Get or set the rotation of the element about its center.\n\nParameters:\n * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not.",
        "stripped_doc" : [
          "Get or set the rotation of the element about its center.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "name" : "rotation",
        "notes" : [
          " * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not."
        ],
        "signature" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the rotation of the element about its center.",
        "parameters" : [
          " * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center",
          ""
        ]
      },
      {
        "doc" : "Get or set the tooltip for the element\n\nParameters:\n * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Tooltips are displayed when the window is active and the mouse pointer hovers over an element.",
        "stripped_doc" : [
          "Get or set the tooltip for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "name" : "tooltip",
        "notes" : [
          " * Tooltips are displayed when the window is active and the mouse pointer hovers over an element."
        ],
        "signature" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "desc" : "Get or set the tooltip for the element",
        "parameters" : [
          " * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element._view"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Provides an AudioVisual player element for `hs._asm.guitk`.",
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
        "stripped_doc" : [
          "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window."
        ],
        "signature" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "type" : "Constructor",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.",
          ""
        ]
      }
    ],
    "doc" : "Provides an AudioVisual player element for `hs._asm.guitk`.\n\nIf you wish to include other elements within the window containing the avplayer object, you will need to use an `hs._asm.guitk.manager` object.  However, since this element is fully self contained and provides its own controls for video playback, it may be easier to attach this element directly to a `hs._asm.guitk` window object when you don't require other elements in the visual display.\n\nPlayback of remote or streaming content has been tested against http:\/\/devimages.apple.com\/iphone\/samples\/bipbop\/bipbopall.m3u8, which is a sample URL provided in the Apple documentation at https:\/\/developer.apple.com\/library\/prerelease\/content\/documentation\/AudioVideo\/Conceptual\/AVFoundationPG\/Articles\/02_Playback.html#\/\/apple_ref\/doc\/uid\/TP40010188-CH3-SW4\n\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.\n\nParameters:\n * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:\n   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.\n   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.\n   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.\n   * `minimal`  - media controls are displayed as a round circle in the center of the media display.\n   * `none`     - no media controls are displayed in the media display.\n   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "name" : "controlsStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
        "parameters" : [
          " * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:",
          "   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.",
          "   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.",
          "   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.",
          "   * `minimal`  - media controls are displayed as a round circle in the center of the media display.",
          "   * `none`     - no media controls are displayed in the media display.",
          "   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".",
          ""
        ]
      },
      {
        "doc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "name" : "frameSteppingButtons",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Flashes the number and optional string over the media playback display momentarily.\n\nParameters:\n * `number` - an integer specifying the chapter number to display.\n * `string` - an optional string specifying the chapter name to display.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed.",
        "stripped_doc" : [
          "Flashes the number and optional string over the media playback display momentarily.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "name" : "flashChapterAndTitle",
        "notes" : [
          " * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Flashes the number and optional string over the media playback display momentarily.",
        "parameters" : [
          " * `number` - an integer specifying the chapter number to display.",
          " * `string` - an optional string specifying the chapter name to display.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNote:\n * this method currently does not work; fixing this is in the TODO list.",
        "stripped_doc" : [
          "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "name" : "pauseWhenHidden",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          "",
          "Note:",
          " * this method currently does not work; fixing this is in the TODO list."
        ],
        "desc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.",
          ""
        ]
      },
      {
        "doc" : "Get or Set the callback function for the avplayerObject.\n\nParameters:\n * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * The callback function should expect 2 or more arguments.  The first two arguments will always be:\n   * `avplayObject` - the avplayerObject userdata\n   * `message`      - a string specifying the reason for the callback.\n   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:\n     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)\n     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)\n     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)\n     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)",
        "stripped_doc" : [
          "Get or Set the callback function for the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The callback function should expect 2 or more arguments.  The first two arguments will always be:",
          "   * `avplayObject` - the avplayerObject userdata",
          "   * `message`      - a string specifying the reason for the callback.",
          "   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:",
          "     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)",
          "     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)",
          "     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)",
          "     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or Set the callback function for the avplayerObject.",
        "parameters" : [
          " * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.",
          ""
        ]
      },
      {
        "doc" : "Load the specified resource for playback.\n\nParameters:\n * `path` - a string specifying the file path or URL to the audiovisual resource.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.\n\n * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".\n * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed.",
        "stripped_doc" : [
          "Load the specified resource for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "name" : "load",
        "notes" : [
          " * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.",
          "",
          " * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".",
          " * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Load the specified resource for playback.",
        "parameters" : [
          " * `path` - a string specifying the file path or URL to the audiovisual resource.",
          ""
        ]
      },
      {
        "doc" : "Play the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "stripped_doc" : [
          "Play the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "name" : "play",
        "notes" : [
          " * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Play the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.",
          ""
        ]
      },
      {
        "doc" : "Pause the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "stripped_doc" : [
          "Pause the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "name" : "pause",
        "notes" : [
          " * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Pause the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.\n\nParameters:\n * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).\n * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).\n * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).\n\n * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:\n   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field\n   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field\n   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field\n   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field\n   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field",
        "stripped_doc" : [
          "Get or set the rate of playback for the audiovisual content of the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "name" : "rate",
        "notes" : [
          " * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).",
          " * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).",
          " * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).",
          "",
          " * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:",
          "   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field",
          "   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field",
          "   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field",
          "   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field",
          "   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.",
        "parameters" : [
          " * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not audio output is muted for the audovisual media item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not audio output is muted for the audovisual media item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "name" : "mute",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not audio output is muted for the audovisual media item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).\n\nParameters:\n * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "name" : "volume",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
        "parameters" : [
          " * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "name" : "ccEnabled",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a periodic callback at the interval specified.\n\nParameters:\n * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"progress\"\n   * the time in seconds specifying the current location in the media playback.\n\n * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface.",
        "stripped_doc" : [
          "Enable or disable a periodic callback at the interval specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "name" : "trackProgress",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"progress\"",
          "   * the time in seconds specifying the current location in the media playback.",
          "",
          " * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.",
          ""
        ],
        "desc" : "Enable or disable a periodic callback at the interval specified.",
        "parameters" : [
          " * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the rate of playback changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value\n   * the rate that the playback was changed to.\n\n * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the rate of playback changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "name" : "trackRate",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value",
          "   * the rate that the playback was changed to.",
          "",
          " * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the rate of playback changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.\n\nParameters:\n * None\n\nReturns:\n * a table containing the following media characteristics, or `nil` if no media content is currently loaded:\n   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.\n   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.\n   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.\n   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.\n   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.\n   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.\n   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.\n   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0.",
        "stripped_doc" : [
          "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "name" : "playbackInformation",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "type" : "Method",
        "returns" : [
          " * a table containing the following media characteristics, or `nil` if no media content is currently loaded:",
          "   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.",
          "   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.",
          "   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.",
          "   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.",
          "   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.",
          "   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.",
          "   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.",
          "   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0."
        ],
        "desc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the current status of the media content loaded for playback.\n\nParameters:\n * None\n\nReturns:\n * One of the following status strings, or `nil` if no media content is currently loaded:\n   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.\n   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin\n   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error.",
        "stripped_doc" : [
          "Returns the current status of the media content loaded for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "name" : "status",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "type" : "Method",
        "returns" : [
          " * One of the following status strings, or `nil` if no media content is currently loaded:",
          "   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.",
          "   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin",
          "   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error."
        ],
        "desc" : "Returns the current status of the media content loaded for playback.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:\n   * the avplayerObject\n   * \"finished\"",
        "stripped_doc" : [
          "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "name" : "trackCompleted",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:",
          "   * the avplayerObject",
          "   * \"finished\""
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the status of loading a media item changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"status\"\n   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)\n   * if the state reported is failed, an error message describing the error that occurred.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the status of loading a media item changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "name" : "trackStatus",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"status\"",
          "   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)",
          "   * if the state reported is failed, an error message describing the error that occurred."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the status of loading a media item changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..",
          ""
        ]
      },
      {
        "doc" : "Returns the current position in seconds within the audiovisual media content.\n\nParameters:\n * None\n\nReturns:\n * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded.",
        "stripped_doc" : [
          "Returns the current position in seconds within the audiovisual media content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "name" : "currentTime",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded."
        ],
        "desc" : "Returns the current position in seconds within the audiovisual media content.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.\n\nParameters:\n * None\n\nReturns:\n * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.\n\nNotes:\n * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.\n\n * a live stream may not provide duration information and also return `nan` for this method.\n\n * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:\n ~~~lua\n duration = avplayer:duration()\n if type(duration) == \"number\" and duration ~= duration then\n     -- the duration is equal to `nan`\n end\n~~~",
        "stripped_doc" : [
          "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "name" : "duration",
        "notes" : [
          " * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.",
          "",
          " * a live stream may not provide duration information and also return `nan` for this method.",
          "",
          " * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:",
          " ~~~lua",
          " duration = avplayer:duration()",
          " if type(duration) == \"number\" and duration ~= duration then",
          "     -- the duration is equal to `nan`",
          " end",
          "~~~"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.",
          ""
        ],
        "desc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.\n\nParameters:\n * `time`     - the location, in seconds, within the audiovisual content to seek to.\n * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.\n\nReturns:\n * the avplayerObject, or nil if no media content is currently loaded\n\nNotes:\n * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"seek\"\n   * the current time, in seconds, specifying the current playback position in the media content\n   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request).",
        "stripped_doc" : [
          "Jumps to the specified location in the audiovisual content currently loaded into the player.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "name" : "seek",
        "notes" : [
          " * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"seek\"",
          "   * the current time, in seconds, specifying the current playback position in the media content",
          "   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request)."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject, or nil if no media content is currently loaded",
          ""
        ],
        "desc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.",
        "parameters" : [
          " * `time`     - the location, in seconds, within the audiovisual content to seek to.",
          " * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the sharing services button is included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "stripped_doc" : [
          "Get or set whether or not the sharing services button is included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "name" : "sharingServiceButton",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the sharing services button is included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the full screen toggle button should be included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "stripped_doc" : [
          "Get or set whether or not the full screen toggle button should be included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "name" : "fullScreenButton",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the full screen toggle button should be included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not external playback via AirPlay is allowed for this item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Get or set whether or not external playback via AirPlay is allowed for this item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "name" : "allowExternalPlayback",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not external playback via AirPlay is allowed for this item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.\n\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "name" : "externalPlayback",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "type" : "Method",
        "returns" : [
          " * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.",
          "",
          ""
        ],
        "desc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
        "stripped_doc" : [
          "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window."
        ],
        "signature" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "type" : "Constructor",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not external playback via AirPlay is allowed for this item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Get or set whether or not external playback via AirPlay is allowed for this item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "name" : "allowExternalPlayback",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not external playback via AirPlay is allowed for this item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.",
          ""
        ]
      },
      {
        "doc" : "Get or Set the callback function for the avplayerObject.\n\nParameters:\n * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * The callback function should expect 2 or more arguments.  The first two arguments will always be:\n   * `avplayObject` - the avplayerObject userdata\n   * `message`      - a string specifying the reason for the callback.\n   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:\n     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)\n     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)\n     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)\n     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)",
        "stripped_doc" : [
          "Get or Set the callback function for the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The callback function should expect 2 or more arguments.  The first two arguments will always be:",
          "   * `avplayObject` - the avplayerObject userdata",
          "   * `message`      - a string specifying the reason for the callback.",
          "   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:",
          "     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)",
          "     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)",
          "     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)",
          "     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or Set the callback function for the avplayerObject.",
        "parameters" : [
          " * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "name" : "ccEnabled",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.",
          ""
        ]
      },
      {
        "doc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.\n\nParameters:\n * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:\n   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.\n   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.\n   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.\n   * `minimal`  - media controls are displayed as a round circle in the center of the media display.\n   * `none`     - no media controls are displayed in the media display.\n   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "name" : "controlsStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
        "parameters" : [
          " * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:",
          "   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.",
          "   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.",
          "   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.",
          "   * `minimal`  - media controls are displayed as a round circle in the center of the media display.",
          "   * `none`     - no media controls are displayed in the media display.",
          "   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".",
          ""
        ]
      },
      {
        "doc" : "Returns the current position in seconds within the audiovisual media content.\n\nParameters:\n * None\n\nReturns:\n * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded.",
        "stripped_doc" : [
          "Returns the current position in seconds within the audiovisual media content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "name" : "currentTime",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded."
        ],
        "desc" : "Returns the current position in seconds within the audiovisual media content.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.\n\nParameters:\n * None\n\nReturns:\n * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.\n\nNotes:\n * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.\n\n * a live stream may not provide duration information and also return `nan` for this method.\n\n * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:\n ~~~lua\n duration = avplayer:duration()\n if type(duration) == \"number\" and duration ~= duration then\n     -- the duration is equal to `nan`\n end\n~~~",
        "stripped_doc" : [
          "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "name" : "duration",
        "notes" : [
          " * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.",
          "",
          " * a live stream may not provide duration information and also return `nan` for this method.",
          "",
          " * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:",
          " ~~~lua",
          " duration = avplayer:duration()",
          " if type(duration) == \"number\" and duration ~= duration then",
          "     -- the duration is equal to `nan`",
          " end",
          "~~~"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.",
          ""
        ],
        "desc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.\n\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "stripped_doc" : [
          "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "name" : "externalPlayback",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "type" : "Method",
        "returns" : [
          " * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.",
          "",
          ""
        ],
        "desc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Flashes the number and optional string over the media playback display momentarily.\n\nParameters:\n * `number` - an integer specifying the chapter number to display.\n * `string` - an optional string specifying the chapter name to display.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed.",
        "stripped_doc" : [
          "Flashes the number and optional string over the media playback display momentarily.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "name" : "flashChapterAndTitle",
        "notes" : [
          " * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Flashes the number and optional string over the media playback display momentarily.",
        "parameters" : [
          " * `number` - an integer specifying the chapter number to display.",
          " * `string` - an optional string specifying the chapter name to display.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "name" : "frameSteppingButtons",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the full screen toggle button should be included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "stripped_doc" : [
          "Get or set whether or not the full screen toggle button should be included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "name" : "fullScreenButton",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the full screen toggle button should be included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Load the specified resource for playback.\n\nParameters:\n * `path` - a string specifying the file path or URL to the audiovisual resource.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.\n\n * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".\n * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed.",
        "stripped_doc" : [
          "Load the specified resource for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "name" : "load",
        "notes" : [
          " * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.",
          "",
          " * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".",
          " * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Load the specified resource for playback.",
        "parameters" : [
          " * `path` - a string specifying the file path or URL to the audiovisual resource.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not audio output is muted for the audovisual media item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set whether or not audio output is muted for the audovisual media item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "name" : "mute",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set whether or not audio output is muted for the audovisual media item.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.",
          ""
        ]
      },
      {
        "doc" : "Pause the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "stripped_doc" : [
          "Pause the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "name" : "pause",
        "notes" : [
          " * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Pause the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNote:\n * this method currently does not work; fixing this is in the TODO list.",
        "stripped_doc" : [
          "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "name" : "pauseWhenHidden",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          "",
          "Note:",
          " * this method currently does not work; fixing this is in the TODO list."
        ],
        "desc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.",
          ""
        ]
      },
      {
        "doc" : "Play the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "stripped_doc" : [
          "Play the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "name" : "play",
        "notes" : [
          " * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "desc" : "Play the audiovisual media currently loaded in the avplayer object.",
        "parameters" : [
          " * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.",
          ""
        ]
      },
      {
        "doc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.\n\nParameters:\n * None\n\nReturns:\n * a table containing the following media characteristics, or `nil` if no media content is currently loaded:\n   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.\n   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.\n   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.\n   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.\n   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.\n   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.\n   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.\n   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0.",
        "stripped_doc" : [
          "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "name" : "playbackInformation",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "type" : "Method",
        "returns" : [
          " * a table containing the following media characteristics, or `nil` if no media content is currently loaded:",
          "   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.",
          "   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.",
          "   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.",
          "   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.",
          "   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.",
          "   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.",
          "   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.",
          "   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0."
        ],
        "desc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.\n\nParameters:\n * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).\n * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).\n * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).\n\n * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:\n   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field\n   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field\n   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field\n   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field\n   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field",
        "stripped_doc" : [
          "Get or set the rate of playback for the audiovisual content of the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "name" : "rate",
        "notes" : [
          " * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).",
          " * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).",
          " * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).",
          "",
          " * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:",
          "   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field",
          "   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field",
          "   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field",
          "   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field",
          "   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.",
        "parameters" : [
          " * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.",
          ""
        ]
      },
      {
        "doc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.\n\nParameters:\n * `time`     - the location, in seconds, within the audiovisual content to seek to.\n * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.\n\nReturns:\n * the avplayerObject, or nil if no media content is currently loaded\n\nNotes:\n * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"seek\"\n   * the current time, in seconds, specifying the current playback position in the media content\n   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request).",
        "stripped_doc" : [
          "Jumps to the specified location in the audiovisual content currently loaded into the player.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "name" : "seek",
        "notes" : [
          " * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"seek\"",
          "   * the current time, in seconds, specifying the current playback position in the media content",
          "   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request)."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject, or nil if no media content is currently loaded",
          ""
        ],
        "desc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.",
        "parameters" : [
          " * `time`     - the location, in seconds, within the audiovisual content to seek to.",
          " * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the sharing services button is included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "stripped_doc" : [
          "Get or set whether or not the sharing services button is included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "name" : "sharingServiceButton",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the sharing services button is included in the media controls.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.",
          ""
        ]
      },
      {
        "doc" : "Returns the current status of the media content loaded for playback.\n\nParameters:\n * None\n\nReturns:\n * One of the following status strings, or `nil` if no media content is currently loaded:\n   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.\n   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin\n   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error.",
        "stripped_doc" : [
          "Returns the current status of the media content loaded for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "name" : "status",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "type" : "Method",
        "returns" : [
          " * One of the following status strings, or `nil` if no media content is currently loaded:",
          "   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.",
          "   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin",
          "   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error."
        ],
        "desc" : "Returns the current status of the media content loaded for playback.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:\n   * the avplayerObject\n   * \"finished\"",
        "stripped_doc" : [
          "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "name" : "trackCompleted",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:",
          "   * the avplayerObject",
          "   * \"finished\""
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a periodic callback at the interval specified.\n\nParameters:\n * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"progress\"\n   * the time in seconds specifying the current location in the media playback.\n\n * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface.",
        "stripped_doc" : [
          "Enable or disable a periodic callback at the interval specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "name" : "trackProgress",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"progress\"",
          "   * the time in seconds specifying the current location in the media playback.",
          "",
          " * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.",
          ""
        ],
        "desc" : "Enable or disable a periodic callback at the interval specified.",
        "parameters" : [
          " * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the rate of playback changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value\n   * the rate that the playback was changed to.\n\n * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the rate of playback changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "name" : "trackRate",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value",
          "   * the rate that the playback was changed to.",
          "",
          " * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the rate of playback changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.",
          ""
        ]
      },
      {
        "doc" : "Enable or disable a callback whenever the status of loading a media item changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"status\"\n   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)\n   * if the state reported is failed, an error message describing the error that occurred.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the status of loading a media item changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "name" : "trackStatus",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"status\"",
          "   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)",
          "   * if the state reported is failed, an error message describing the error that occurred."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Enable or disable a callback whenever the status of loading a media item changes.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..",
          ""
        ]
      },
      {
        "doc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).\n\nParameters:\n * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "stripped_doc" : [
          "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "name" : "volume",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "desc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
        "parameters" : [
          " * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element.avplayer"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Provides button and checkbox elements for use with `hs._asm.guitk`.",
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Provides button and checkbox elements for use with `hs._asm.guitk`.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [

    ],
    "items" : [

    ],
    "name" : "hs._asm.guitk.element.button"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Get or set whether or not the alpha component is ignored in the color picker.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.\n\nReturns:\n * a boolean representing the, possibly new, state.\n\nNote:\n * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.\n\n* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "stripped_doc" : [
          "Get or set whether or not the alpha component is ignored in the color picker.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "name" : "ignoresAlpha",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state.",
          "",
          "Note:",
          " * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.",
          "",
          "* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "desc" : "Get or set whether or not the alpha component is ignored in the color picker.",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the color picker panel is currently open and visible or not.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.\n\nReturns:\n * a boolean representing the, possibly new, state\n\nNotes:\n * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "stripped_doc" : [
          "Get or set whether the color picker panel is currently open and visible or not.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "name" : "panelVisible",
        "notes" : [
          " * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state",
          ""
        ],
        "desc" : "Get or set whether the color picker panel is currently open and visible or not.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.",
          ""
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Provides acolorwell element `hs._asm.guitk`. A colorwell is a rectangular swatch of color which the user can click on to pop up the color picker for choosing a new color.",
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Creates a new colorwell element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the colorwellObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "stripped_doc" : [
          "Creates a new colorwell element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "type" : "Constructor",
        "returns" : [
          " * the colorwellObject",
          ""
        ],
        "desc" : "Creates a new colorwell element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      }
    ],
    "doc" : "Provides acolorwell element `hs._asm.guitk`. A colorwell is a rectangular swatch of color which the user can click on to pop up the color picker for choosing a new color.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the colorwell is activated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didBeginEditing\" indicating that the colorwell element has become active\n   * When the colorwell is deactivated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active\n     * a table describing the new color as defined by the `hs.drawing.color` module.\n   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.\n     * a table describing the currently selected color as defined by the `hs.drawing.color` module.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the colorwell is activated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didBeginEditing\" indicating that the colorwell element has become active",
          "   * When the colorwell is deactivated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active",
          "     * a table describing the new color as defined by the `hs.drawing.color` module.",
          "   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.",
          "     * a table describing the currently selected color as defined by the `hs.drawing.color` module."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the colorwell element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether the colorwell element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "name" : "bordered",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether the colorwell element has a rectangular border around it.",
        "parameters" : [
          " * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the colorwell element is the currently active element.\n\nParameters:\n * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.\n * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:\n\n ~~~lua\n colorwell:callback(function(obj, msg, color)\n     if msg == \"didBeginEditing\" then\n        -- do what you want when the color picker is opened\n      elseif msg == \"colorDidChange\" then\n        -- do what you want with the color as it changes\n      elseif msg == \"didEndEditing\" then\n        hs._asm.guitk.element.colorwell.panelVisible(false)\n        -- now do what you want with the newly chosen color\n      end\n end)\n ~~~",
        "stripped_doc" : [
          "Get or set whether the colorwell element is the currently active element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "name" : "active",
        "notes" : [
          " * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.",
          " * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:",
          "",
          " ~~~lua",
          " colorwell:callback(function(obj, msg, color)",
          "     if msg == \"didBeginEditing\" then",
          "        -- do what you want when the color picker is opened",
          "      elseif msg == \"colorDidChange\" then",
          "        -- do what you want with the color as it changes",
          "      elseif msg == \"didEndEditing\" then",
          "        hs._asm.guitk.element.colorwell.panelVisible(false)",
          "        -- now do what you want with the newly chosen color",
          "      end",
          " end)",
          " ~~~"
        ],
        "signature" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether the colorwell element is the currently active element.",
        "parameters" : [
          " * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).",
          ""
        ]
      },
      {
        "doc" : "Get or set the color currently being displayed by the colorwell element\n\nParameters:\n * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0.",
        "stripped_doc" : [
          "Get or set the color currently being displayed by the colorwell element",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "name" : "color",
        "notes" : [
          " * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the color currently being displayed by the colorwell element",
        "parameters" : [
          " * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "Get or set whether or not the alpha component is ignored in the color picker.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.\n\nReturns:\n * a boolean representing the, possibly new, state.\n\nNote:\n * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.\n\n* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "stripped_doc" : [
          "Get or set whether or not the alpha component is ignored in the color picker.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "name" : "ignoresAlpha",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state.",
          "",
          "Note:",
          " * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.",
          "",
          "* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "desc" : "Get or set whether or not the alpha component is ignored in the color picker.",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the color picker panel is currently open and visible or not.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.\n\nReturns:\n * a boolean representing the, possibly new, state\n\nNotes:\n * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "stripped_doc" : [
          "Get or set whether the color picker panel is currently open and visible or not.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "name" : "panelVisible",
        "notes" : [
          " * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state",
          ""
        ],
        "desc" : "Get or set whether the color picker panel is currently open and visible or not.",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.",
          ""
        ]
      },
      {
        "doc" : "Creates a new colorwell element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the colorwellObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "stripped_doc" : [
          "Creates a new colorwell element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "type" : "Constructor",
        "returns" : [
          " * the colorwellObject",
          ""
        ],
        "desc" : "Creates a new colorwell element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the colorwell element is the currently active element.\n\nParameters:\n * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.\n * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:\n\n ~~~lua\n colorwell:callback(function(obj, msg, color)\n     if msg == \"didBeginEditing\" then\n        -- do what you want when the color picker is opened\n      elseif msg == \"colorDidChange\" then\n        -- do what you want with the color as it changes\n      elseif msg == \"didEndEditing\" then\n        hs._asm.guitk.element.colorwell.panelVisible(false)\n        -- now do what you want with the newly chosen color\n      end\n end)\n ~~~",
        "stripped_doc" : [
          "Get or set whether the colorwell element is the currently active element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "name" : "active",
        "notes" : [
          " * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.",
          " * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:",
          "",
          " ~~~lua",
          " colorwell:callback(function(obj, msg, color)",
          "     if msg == \"didBeginEditing\" then",
          "        -- do what you want when the color picker is opened",
          "      elseif msg == \"colorDidChange\" then",
          "        -- do what you want with the color as it changes",
          "      elseif msg == \"didEndEditing\" then",
          "        hs._asm.guitk.element.colorwell.panelVisible(false)",
          "        -- now do what you want with the newly chosen color",
          "      end",
          " end)",
          " ~~~"
        ],
        "signature" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether the colorwell element is the currently active element.",
        "parameters" : [
          " * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the colorwell element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set whether the colorwell element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "name" : "bordered",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set whether the colorwell element has a rectangular border around it.",
        "parameters" : [
          " * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the colorwell is activated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didBeginEditing\" indicating that the colorwell element has become active\n   * When the colorwell is deactivated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active\n     * a table describing the new color as defined by the `hs.drawing.color` module.\n   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.\n     * a table describing the currently selected color as defined by the `hs.drawing.color` module.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the colorwell is activated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didBeginEditing\" indicating that the colorwell element has become active",
          "   * When the colorwell is deactivated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active",
          "     * a table describing the new color as defined by the `hs.drawing.color` module.",
          "   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.",
          "     * a table describing the currently selected color as defined by the `hs.drawing.color` module."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the color currently being displayed by the colorwell element\n\nParameters:\n * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0.",
        "stripped_doc" : [
          "Get or set the color currently being displayed by the colorwell element",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "name" : "color",
        "notes" : [
          " * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the color currently being displayed by the colorwell element",
        "parameters" : [
          " * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element.colorwell"
  },
  {
    "Constant" : [
      {
        "doc" : "A table which contains an array of strings listing the calendar types supported by the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the calendar types supported by the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "name" : "calendarIdentifiers",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table which contains an array of strings listing the calendar types supported by the system.",
        "parameters" : [

        ]
      },
      {
        "doc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents.",
        "stripped_doc" : [
          "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "name" : "timezoneAbbreviations",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
        "parameters" : [

        ]
      },
      {
        "doc" : "A table which contains an array of strings listing the names of all the time zones known to the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the names of all the time zones known to the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "name" : "timezoneNames",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table which contains an array of strings listing the names of all the time zones known to the system.",
        "parameters" : [

        ]
      }
    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Provides a date picker element for use with `hs._asm.guitk`.",
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Creates a new date picker element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the datepickerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date).",
        "stripped_doc" : [
          "Creates a new date picker element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "type" : "Constructor",
        "returns" : [
          " * the datepickerObject",
          ""
        ],
        "desc" : "Creates a new date picker element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      }
    ],
    "doc" : "Provides a date picker element for use with `hs._asm.guitk`.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the datepicker is becomes active the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didBeginEditing\" indicating that the datepicker element has become active\n   * When the user leaves the datepicker element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)\n   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the datepicker is becomes active the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didBeginEditing\" indicating that the datepicker element has become active",
          "   * When the user leaves the datepicker element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
          "   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the datepicker element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false.",
        "stripped_doc" : [
          "Get or set whether the datepicker element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "name" : "bordered",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether the datepicker element has a rectangular border around it.",
        "parameters" : [
          " * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the datepicker element has a bezeled border around it.\n\nParameters:\n * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false.",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element has a bezeled border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "name" : "bezeled",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the datepicker element has a bezeled border around it.",
        "parameters" : [
          " * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the datepicker element draws its background.\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor).",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element draws its background.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "name" : "drawsBackground",
        "notes" : [
          " * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the datepicker element draws its background.",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.",
          ""
        ]
      },
      {
        "doc" : "Get or set the color for the background of datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground).\n * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set.",
        "stripped_doc" : [
          "Get or set the color for the background of datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "name" : "backgroundColor",
        "notes" : [
          " * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground).",
          " * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the color for the background of datepicker element.",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "doc" : "Get or set the color for the text of the datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\".",
        "stripped_doc" : [
          "Get or set the color for the text of the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "name" : "textColor",
        "notes" : [
          " * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\"."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the color for the text of the datepicker element.",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "doc" : "Get or set whether a date range can be selected by the datepicker object\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)",
        "stripped_doc" : [
          "Get or set whether a date range can be selected by the datepicker object",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "name" : "dateRangeMode",
        "notes" : [
          " * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether a date range can be selected by the datepicker object",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.",
          ""
        ]
      },
      {
        "doc" : "Get or set the style of datepicker element displayed.\n\nParameters:\n * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows\n   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).\n   * \"textField\"           - displays the date in an editable textfield\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the style of datepicker element displayed.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "name" : "pickerStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set the style of datepicker element displayed.",
        "parameters" : [
          " * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows",
          "   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).",
          "   * \"textField\"           - displays the date in an editable textfield",
          ""
        ]
      },
      {
        "doc" : "Get or set what date and time components the datepicker element presents to the user for modification\n\nParameters:\n * `elements` - an optional table containing the following key-value pairs:\n   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:\n     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.\n     * \"HM\"  - allows setting the hour and minute of the time\n     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)\n   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:\n     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.\n     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".\n     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set what date and time components the datepicker element presents to the user for modification",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "name" : "pickerElements",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set what date and time components the datepicker element presents to the user for modification",
        "parameters" : [
          " * `elements` - an optional table containing the following key-value pairs:",
          "   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:",
          "     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.",
          "     * \"HM\"  - allows setting the hour and minute of the time",
          "     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)",
          "   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:",
          "     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.",
          "     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".",
          "     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)",
          ""
        ]
      },
      {
        "doc" : "Get or set the current locale used for displaying the datepicker element.\n\nParameters:\n * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See `hs.host.locale.availableLocales` for a list of locales available.",
        "stripped_doc" : [
          "Get or set the current locale used for displaying the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "name" : "locale",
        "notes" : [
          " * See `hs.host.locale.availableLocales` for a list of locales available."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current locale used for displaying the datepicker element.",
        "parameters" : [
          " * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.",
          ""
        ]
      },
      {
        "doc" : "Get or set the current timezone used for displaying the time in the datepicker element.\n\nParameters:\n * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method.",
        "stripped_doc" : [
          "Get or set the current timezone used for displaying the time in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "name" : "timezone",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current timezone used for displaying the time in the datepicker element.",
        "parameters" : [
          " * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.",
          ""
        ]
      },
      {
        "doc" : "Get or set the current calendar used for displaying the date in the datepicker element.\n\nParameters:\n * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method.",
        "stripped_doc" : [
          "Get or set the current calendar used for displaying the date in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "name" : "calendar",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current calendar used for displaying the date in the datepicker element.",
        "parameters" : [
          " * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.",
          ""
        ]
      },
      {
        "doc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.\n\nParameters:\n * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.\n * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element.",
        "stripped_doc" : [
          "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "name" : "timeInterval",
        "notes" : [
          " * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.",
          " * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
        "parameters" : [
          " * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.\n\nParameters:\n * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`\n\n * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`.",
        "stripped_doc" : [
          "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "name" : "date",
        "notes" : [
          " * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`",
          "",
          " * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
        "parameters" : [
          " * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).",
          ""
        ]
      },
      {
        "doc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate).",
        "stripped_doc" : [
          "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "name" : "maxDate",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
        "parameters" : [
          " * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.",
          ""
        ]
      },
      {
        "doc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate).",
        "stripped_doc" : [
          "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "name" : "minDate",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
        "parameters" : [
          " * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "A table which contains an array of strings listing the calendar types supported by the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the calendar types supported by the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "name" : "calendarIdentifiers",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table which contains an array of strings listing the calendar types supported by the system.",
        "parameters" : [

        ]
      },
      {
        "doc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents.",
        "stripped_doc" : [
          "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "name" : "timezoneAbbreviations",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
        "parameters" : [

        ]
      },
      {
        "doc" : "A table which contains an array of strings listing the names of all the time zones known to the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the names of all the time zones known to the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "name" : "timezoneNames",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table which contains an array of strings listing the names of all the time zones known to the system.",
        "parameters" : [

        ]
      },
      {
        "doc" : "Creates a new date picker element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the datepickerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date).",
        "stripped_doc" : [
          "Creates a new date picker element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "type" : "Constructor",
        "returns" : [
          " * the datepickerObject",
          ""
        ],
        "desc" : "Creates a new date picker element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the color for the background of datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground).\n * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set.",
        "stripped_doc" : [
          "Get or set the color for the background of datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "name" : "backgroundColor",
        "notes" : [
          " * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground).",
          " * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the color for the background of datepicker element.",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the datepicker element has a bezeled border around it.\n\nParameters:\n * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false.",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element has a bezeled border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "name" : "bezeled",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the datepicker element has a bezeled border around it.",
        "parameters" : [
          " * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether the datepicker element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false.",
        "stripped_doc" : [
          "Get or set whether the datepicker element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "name" : "bordered",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether the datepicker element has a rectangular border around it.",
        "parameters" : [
          " * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the current calendar used for displaying the date in the datepicker element.\n\nParameters:\n * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method.",
        "stripped_doc" : [
          "Get or set the current calendar used for displaying the date in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "name" : "calendar",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current calendar used for displaying the date in the datepicker element.",
        "parameters" : [
          " * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.",
          ""
        ]
      },
      {
        "doc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the datepicker is becomes active the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didBeginEditing\" indicating that the datepicker element has become active\n   * When the user leaves the datepicker element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)\n   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the datepicker is becomes active the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didBeginEditing\" indicating that the datepicker element has become active",
          "   * When the user leaves the datepicker element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
          "   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.\n\nParameters:\n * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`\n\n * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`.",
        "stripped_doc" : [
          "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "name" : "date",
        "notes" : [
          " * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`",
          "",
          " * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
        "parameters" : [
          " * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).",
          ""
        ]
      },
      {
        "doc" : "Get or set whether a date range can be selected by the datepicker object\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)",
        "stripped_doc" : [
          "Get or set whether a date range can be selected by the datepicker object",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "name" : "dateRangeMode",
        "notes" : [
          " * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set whether a date range can be selected by the datepicker object",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the datepicker element draws its background.\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor).",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element draws its background.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "name" : "drawsBackground",
        "notes" : [
          " * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the datepicker element draws its background.",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.",
          ""
        ]
      },
      {
        "doc" : "Get or set the current locale used for displaying the datepicker element.\n\nParameters:\n * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See `hs.host.locale.availableLocales` for a list of locales available.",
        "stripped_doc" : [
          "Get or set the current locale used for displaying the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "name" : "locale",
        "notes" : [
          " * See `hs.host.locale.availableLocales` for a list of locales available."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current locale used for displaying the datepicker element.",
        "parameters" : [
          " * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.",
          ""
        ]
      },
      {
        "doc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate).",
        "stripped_doc" : [
          "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "name" : "maxDate",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
        "parameters" : [
          " * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.",
          ""
        ]
      },
      {
        "doc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate).",
        "stripped_doc" : [
          "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "name" : "minDate",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
        "parameters" : [
          " * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.",
          ""
        ]
      },
      {
        "doc" : "Get or set what date and time components the datepicker element presents to the user for modification\n\nParameters:\n * `elements` - an optional table containing the following key-value pairs:\n   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:\n     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.\n     * \"HM\"  - allows setting the hour and minute of the time\n     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)\n   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:\n     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.\n     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".\n     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set what date and time components the datepicker element presents to the user for modification",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "name" : "pickerElements",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set what date and time components the datepicker element presents to the user for modification",
        "parameters" : [
          " * `elements` - an optional table containing the following key-value pairs:",
          "   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:",
          "     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.",
          "     * \"HM\"  - allows setting the hour and minute of the time",
          "     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)",
          "   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:",
          "     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.",
          "     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".",
          "     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)",
          ""
        ]
      },
      {
        "doc" : "Get or set the style of datepicker element displayed.\n\nParameters:\n * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows\n   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).\n   * \"textField\"           - displays the date in an editable textfield\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the style of datepicker element displayed.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "name" : "pickerStyle",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set the style of datepicker element displayed.",
        "parameters" : [
          " * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows",
          "   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).",
          "   * \"textField\"           - displays the date in an editable textfield",
          ""
        ]
      },
      {
        "doc" : "Get or set the color for the text of the datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\".",
        "stripped_doc" : [
          "Get or set the color for the text of the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "name" : "textColor",
        "notes" : [
          " * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\"."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the color for the text of the datepicker element.",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "doc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.\n\nParameters:\n * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.\n * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element.",
        "stripped_doc" : [
          "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "name" : "timeInterval",
        "notes" : [
          " * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.",
          " * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
        "parameters" : [
          " * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the current timezone used for displaying the time in the datepicker element.\n\nParameters:\n * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method.",
        "stripped_doc" : [
          "Get or set the current timezone used for displaying the time in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "name" : "timezone",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current timezone used for displaying the time in the datepicker element.",
        "parameters" : [
          " * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element.datepicker"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Provides an image holder element `hs._asm.guitk`. The image can be static, specified by you, or it can be an editable element, allowing the user to change the image through drag-and-drop or cut-and-paste.",
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Creates a new image holder element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the imageObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "stripped_doc" : [
          "Creates a new image holder element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "type" : "Constructor",
        "returns" : [
          " * the imageObject",
          ""
        ],
        "desc" : "Creates a new image holder element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      }
    ],
    "doc" : "Provides an image holder element `hs._asm.guitk`. The image can be static, specified by you, or it can be an editable element, allowing the user to change the image through drag-and-drop or cut-and-paste.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Get or set the alignment of the image within the image element.\n\nParameters:\n * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner\n   * \"top\"         - the image's top match the element frame's top and will be centered horizontally\n   * \"topRight\"    - the image's top right corner will match the element frame's top right corner\n   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically\n   * \"center\"      - the image will be centered vertically and horizontally within the element frame\n   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically\n   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner\n   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally\n   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the alignment of the image within the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "name" : "imageAlignment",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set the alignment of the image within the image element.",
        "parameters" : [
          " * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner",
          "   * \"top\"         - the image's top match the element frame's top and will be centered horizontally",
          "   * \"topRight\"    - the image's top right corner will match the element frame's top right corner",
          "   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically",
          "   * \"center\"      - the image will be centered vertically and horizontally within the element frame",
          "   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically",
          "   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner",
          "   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally",
          "   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner",
          ""
        ]
      },
      {
        "doc" : "Get or set the visual frame drawn around the image element area.\n\nParameters:\n * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:\n   * \"none\"   - no frame is drawing around the image element frame\n   * \"photo\"  - a thin black outline with a white background and a dropped shadow.\n   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken\n   * \"groove\" - a thin groove with a gray background that looks etched around the image\n   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel.",
        "stripped_doc" : [
          "Get or set the visual frame drawn around the image element area.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "name" : "imageFrameStyle",
        "notes" : [
          " * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel."
        ],
        "signature" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the visual frame drawn around the image element area.",
        "parameters" : [
          " * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:",
          "   * \"none\"   - no frame is drawing around the image element frame",
          "   * \"photo\"  - a thin black outline with a white background and a dropped shadow.",
          "   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken",
          "   * \"groove\" - a thin groove with a gray background that looks etched around the image",
          "   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto",
          ""
        ]
      },
      {
        "doc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly\n\nParameters:\n * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:\n   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame\n   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio\n   * \"none\"                   - perform no scaling or resizing of the image\n   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "name" : "imageScaling",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
        "parameters" : [
          " * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:",
          "   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame",
          "   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio",
          "   * \"none\"                   - perform no scaling or resizing of the image",
          "   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration",
          ""
        ]
      },
      {
        "doc" : "Get or set the image currently being displayed in the image element.\n\nParameters:\n * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method.",
        "stripped_doc" : [
          "Get or set the image currently being displayed in the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "name" : "image",
        "notes" : [
          " * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method."
        ],
        "signature" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the image currently being displayed in the image element.",
        "parameters" : [
          " * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.\n   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.",
          "   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image."
        ],
        "signature" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "Creates a new image holder element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the imageObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "stripped_doc" : [
          "Creates a new image holder element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "type" : "Constructor",
        "returns" : [
          " * the imageObject",
          ""
        ],
        "desc" : "Creates a new image holder element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.\n   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "name" : "callback",
        "notes" : [
          " * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.",
          "   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image."
        ],
        "signature" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.",
          ""
        ]
      },
      {
        "doc" : "Get or set the image currently being displayed in the image element.\n\nParameters:\n * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method.",
        "stripped_doc" : [
          "Get or set the image currently being displayed in the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "name" : "image",
        "notes" : [
          " * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method."
        ],
        "signature" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the image currently being displayed in the image element.",
        "parameters" : [
          " * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.",
          ""
        ]
      },
      {
        "doc" : "Get or set the alignment of the image within the image element.\n\nParameters:\n * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner\n   * \"top\"         - the image's top match the element frame's top and will be centered horizontally\n   * \"topRight\"    - the image's top right corner will match the element frame's top right corner\n   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically\n   * \"center\"      - the image will be centered vertically and horizontally within the element frame\n   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically\n   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner\n   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally\n   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the alignment of the image within the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "name" : "imageAlignment",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set the alignment of the image within the image element.",
        "parameters" : [
          " * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner",
          "   * \"top\"         - the image's top match the element frame's top and will be centered horizontally",
          "   * \"topRight\"    - the image's top right corner will match the element frame's top right corner",
          "   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically",
          "   * \"center\"      - the image will be centered vertically and horizontally within the element frame",
          "   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically",
          "   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner",
          "   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally",
          "   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner",
          ""
        ]
      },
      {
        "doc" : "Get or set the visual frame drawn around the image element area.\n\nParameters:\n * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:\n   * \"none\"   - no frame is drawing around the image element frame\n   * \"photo\"  - a thin black outline with a white background and a dropped shadow.\n   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken\n   * \"groove\" - a thin groove with a gray background that looks etched around the image\n   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel.",
        "stripped_doc" : [
          "Get or set the visual frame drawn around the image element area.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "name" : "imageFrameStyle",
        "notes" : [
          " * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel."
        ],
        "signature" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the visual frame drawn around the image element area.",
        "parameters" : [
          " * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:",
          "   * \"none\"   - no frame is drawing around the image element frame",
          "   * \"photo\"  - a thin black outline with a white background and a dropped shadow.",
          "   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken",
          "   * \"groove\" - a thin groove with a gray background that looks etched around the image",
          "   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto",
          ""
        ]
      },
      {
        "doc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly\n\nParameters:\n * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:\n   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame\n   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio\n   * \"none\"                   - perform no scaling or resizing of the image\n   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "stripped_doc" : [
          "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "name" : "imageScaling",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "desc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
        "parameters" : [
          " * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:",
          "   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame",
          "   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio",
          "   * \"none\"                   - perform no scaling or resizing of the image",
          "   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element.image"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Provides spinning and bar progress indicator elements for use with `hs._asm.guitk`.",
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.\n\nReturns:\n * the progressIndicatorObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible.",
        "stripped_doc" : [
          "Creates a new Progress Indicator element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "type" : "Constructor",
        "returns" : [
          " * the progressIndicatorObject",
          ""
        ],
        "desc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.",
          ""
        ]
      }
    ],
    "doc" : "Provides spinning and bar progress indicator elements for use with `hs._asm.guitk`.\n\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "If the progress indicator is indeterminate, starts the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, starts the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "name" : "start",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "If the progress indicator is indeterminate, starts the animation for the indicator.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "If the progress indicator is indeterminate, stops the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, stops the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "name" : "stop",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "If the progress indicator is indeterminate, stops the animation for the indicator.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator.",
        "stripped_doc" : [
          "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "name" : "threaded",
        "notes" : [
          " * The default setting for this is true.",
          " * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator."
        ],
        "signature" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "name" : "indeterminate",
        "notes" : [
          " * The default setting for this is true.",
          " * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)"
        ],
        "signature" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions).",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "name" : "bezeled",
        "notes" : [
          " * The default setting for this is true.",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is visible when animation has been stopped.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "name" : "visibleWhenStopped",
        "notes" : [
          " * The default setting for this is true."
        ],
        "signature" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is false.\n * An indeterminate circular indicator is displayed as the spinning star seen during system startup.\n * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.\n * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.\n * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "name" : "circular",
        "notes" : [
          " * The default setting for this is false.",
          " * An indeterminate circular indicator is displayed as the spinning star seen during system startup.",
          " * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.",
          " * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.",
          " * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases."
        ],
        "signature" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)",
          ""
        ]
      },
      {
        "doc" : "Get or set the current value of the progress indicator's completion status.\n\nParameters:\n * `value` - an optional number indicating the current extent of the progress.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value.",
        "stripped_doc" : [
          "Get or set the current value of the progress indicator's completion status.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "name" : "value",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value."
        ],
        "signature" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current value of the progress indicator's completion status.",
        "parameters" : [
          " * `value` - an optional number indicating the current extent of the progress.",
          ""
        ]
      },
      {
        "doc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the minimum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max).",
        "stripped_doc" : [
          "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "name" : "min",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max)."
        ],
        "signature" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
        "parameters" : [
          " * `value` - an optional number indicating the minimum value.",
          ""
        ]
      },
      {
        "doc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the maximum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 100.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min).",
        "stripped_doc" : [
          "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "name" : "max",
        "notes" : [
          " * The default value for this is 100.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min)."
        ],
        "signature" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
        "parameters" : [
          " * `value` - an optional number indicating the maximum value.",
          ""
        ]
      },
      {
        "doc" : "Increment the current value of a progress indicator's progress by the amount specified.\n\nParameters:\n * `value` - the value by which to increment the progress indicator's current value.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster.",
        "stripped_doc" : [
          "Increment the current value of a progress indicator's progress by the amount specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "name" : "increment",
        "notes" : [
          " * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster."
        ],
        "signature" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "Increment the current value of a progress indicator's progress by the amount specified.",
        "parameters" : [
          " * `value` - the value by which to increment the progress indicator's current value.",
          ""
        ]
      },
      {
        "doc" : "Get or set the indicator's tint.\n\nParameters:\n * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"default\".\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions).",
        "stripped_doc" : [
          "Get or set the indicator's tint.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "name" : "tint",
        "notes" : [
          " * The default setting for this is \"default\".",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the indicator's tint.",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the indicator's size.\n\nParameters:\n * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"regular\".\n * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.\n * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11.",
        "stripped_doc" : [
          "Get or set the indicator's size.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "name" : "indicatorSize",
        "notes" : [
          " * The default setting for this is \"regular\".",
          " * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.",
          " * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11."
        ],
        "signature" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the indicator's size.",
        "parameters" : [
          " * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the fill color for a progress indicator.\n\nParameters:\n * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.\n * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known.",
        "stripped_doc" : [
          "Get or set the fill color for a progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "name" : "color",
        "notes" : [
          " * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.",
          " * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known."
        ],
        "signature" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "Get or set the fill color for a progress indicator.",
        "parameters" : [
          " * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.\n\nReturns:\n * the progressIndicatorObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible.",
        "stripped_doc" : [
          "Creates a new Progress Indicator element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "name" : "new",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "type" : "Constructor",
        "returns" : [
          " * the progressIndicatorObject",
          ""
        ],
        "desc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions).",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "name" : "bezeled",
        "notes" : [
          " * The default setting for this is true.",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is false.\n * An indeterminate circular indicator is displayed as the spinning star seen during system startup.\n * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.\n * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.\n * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "name" : "circular",
        "notes" : [
          " * The default setting for this is false.",
          " * An indeterminate circular indicator is displayed as the spinning star seen during system startup.",
          " * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.",
          " * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.",
          " * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases."
        ],
        "signature" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)",
          ""
        ]
      },
      {
        "doc" : "Get or set the fill color for a progress indicator.\n\nParameters:\n * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.\n * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known.",
        "stripped_doc" : [
          "Get or set the fill color for a progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "name" : "color",
        "notes" : [
          " * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.",
          " * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known."
        ],
        "signature" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "Get or set the fill color for a progress indicator.",
        "parameters" : [
          " * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.",
          ""
        ]
      },
      {
        "doc" : "Increment the current value of a progress indicator's progress by the amount specified.\n\nParameters:\n * `value` - the value by which to increment the progress indicator's current value.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster.",
        "stripped_doc" : [
          "Increment the current value of a progress indicator's progress by the amount specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "name" : "increment",
        "notes" : [
          " * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster."
        ],
        "signature" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "Increment the current value of a progress indicator's progress by the amount specified.",
        "parameters" : [
          " * `value` - the value by which to increment the progress indicator's current value.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "name" : "indeterminate",
        "notes" : [
          " * The default setting for this is true.",
          " * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)"
        ],
        "signature" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.",
          ""
        ]
      },
      {
        "doc" : "Get or set the indicator's size.\n\nParameters:\n * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"regular\".\n * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.\n * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11.",
        "stripped_doc" : [
          "Get or set the indicator's size.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "name" : "indicatorSize",
        "notes" : [
          " * The default setting for this is \"regular\".",
          " * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.",
          " * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11."
        ],
        "signature" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the indicator's size.",
        "parameters" : [
          " * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the maximum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 100.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min).",
        "stripped_doc" : [
          "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "name" : "max",
        "notes" : [
          " * The default value for this is 100.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min)."
        ],
        "signature" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
        "parameters" : [
          " * `value` - an optional number indicating the maximum value.",
          ""
        ]
      },
      {
        "doc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the minimum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max).",
        "stripped_doc" : [
          "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "name" : "min",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max)."
        ],
        "signature" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
        "parameters" : [
          " * `value` - an optional number indicating the minimum value.",
          ""
        ]
      },
      {
        "doc" : "If the progress indicator is indeterminate, starts the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, starts the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "name" : "start",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "If the progress indicator is indeterminate, starts the animation for the indicator.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "If the progress indicator is indeterminate, stops the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, stops the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "name" : "stop",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "desc" : "If the progress indicator is indeterminate, stops the animation for the indicator.",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator.",
        "stripped_doc" : [
          "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "name" : "threaded",
        "notes" : [
          " * The default setting for this is true.",
          " * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator."
        ],
        "signature" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.",
          ""
        ]
      },
      {
        "doc" : "Get or set the indicator's tint.\n\nParameters:\n * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"default\".\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions).",
        "stripped_doc" : [
          "Get or set the indicator's tint.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "name" : "tint",
        "notes" : [
          " * The default setting for this is \"default\".",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the indicator's tint.",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".",
          ""
        ]
      },
      {
        "doc" : "Get or set the current value of the progress indicator's completion status.\n\nParameters:\n * `value` - an optional number indicating the current extent of the progress.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value.",
        "stripped_doc" : [
          "Get or set the current value of the progress indicator's completion status.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "name" : "value",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value."
        ],
        "signature" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set the current value of the progress indicator's completion status.",
        "parameters" : [
          " * `value` - an optional number indicating the current extent of the progress.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is visible when animation has been stopped.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "name" : "visibleWhenStopped",
        "notes" : [
          " * The default setting for this is true."
        ],
        "signature" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "desc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.guitk.element.progress"
  }
]
